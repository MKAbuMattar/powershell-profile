#---------------------------------------------------------------------------------------------------
# MKAbuMattar's PowerShell Profile - Kubectl Plugin
#
#
#                             .
#         ..                .''
#         .,'..,.         ..,;,'
#          ,;;;;,,       .,,;;;
#           ,;;;;;'    .',;;;
#            ,;;;;,'...,;;;,
#             ,;;;;;,,;;;;.
#              ,;;;;;;;;;
#              .,;;;;;;;
#              .,;;;;;;;'
#              .,;;;;;;;,'
#            .',;;;;;;;;;;,.
#          ..,;;;;;;;;;;;;;,.
#         .';;;;;.   ';;;;;;,'
#        .,;;;;.      ,; .;; .,
#        ',;;;.        .
#        .,;;.
#        ,;
#        .
#
#      "The only way to do great work is to love what you do."
#                           - Steve Jobs
#
#
# Author: Mohammad Abu Mattar
#
# Description:
#       This module provides kubectl CLI shortcuts and utility functions for improved
#       Kubernetes cluster management workflow in PowerShell environments.
#
# Created: 2025-09-26
# Updated: 2025-09-26
#
# GitHub: https://github.com/MKAbuMattar/powershell-profile
#
# Version: 4.1.0
#---------------------------------------------------------------------------------------------------

function Test-KubectlInstalled {
    <#
    .SYNOPSIS
        Tests if kubectl is installed and accessible via PATH.

    .DESCRIPTION
        This function checks whether the kubectl CLI tool is installed and available in the system PATH.
        It's used by all kubectl functions to ensure the tool is available before attempting to execute commands.

    .INPUTS
        None. This function does not accept any input.

    .OUTPUTS
        System.Boolean. Returns $true if kubectl is installed and accessible, $false otherwise.

    .EXAMPLE
        Test-KubectlInstalled
        Returns $true if kubectl is available, $false if not.

    .NOTES
        - This function is called internally by all kubectl wrapper functions.
        - If kubectl is not found, functions will display a warning and return early.
        - The function uses Get-Command with SilentlyContinue to avoid error output.
    #>
    return [bool](Get-Command 'kubectl' -ErrorAction SilentlyContinue)
}

$script:KubectlCompletionInitialized = $false

function Initialize-KubectlCompletion {
    <#
    .SYNOPSIS
        A PowerShell function that initializes kubectl completion for the current session.

    .DESCRIPTION
        This function sets up kubectl command completion for PowerShell by generating and sourcing
        the completion script. It checks if completion is already initialized to avoid redundant setup.
        The completion enhances the PowerShell experience by providing tab completion for kubectl commands.

    .INPUTS
        None. This function does not accept any input.

    .OUTPUTS
        None. This function initializes completion but does not return objects.

    .EXAMPLE
        Initialize-KubectlCompletion
        Sets up kubectl completion for the current PowerShell session.

    .NOTES
        - This function is called automatically when the module is loaded.
        - kubectl completion requires PowerShell 5.0 or later.
        - The completion script is generated by kubectl itself using 'kubectl completion powershell'.
    #>
    if (-not (Test-KubectlInstalled) -or -not $script:KubectlCompletionInitialized -or $PSVersionTable.PSVersion.Major -lt 5) {
        return
    }
    
    try {
        $completionScript = kubectl completion powershell
        if ($completionScript) {
            Invoke-Expression $completionScript
            $script:KubectlCompletionInitialized = $true
        }
    }
    catch {
        Write-Verbose "Failed to initialize kubectl completion: $_"
    }
}

Initialize-KubectlCompletion

#---------------------------------------------------------------------------------------------------
# Core kubectl Functions
#---------------------------------------------------------------------------------------------------

function Invoke-Kubectl {
    <#
    .SYNOPSIS
        A PowerShell function that wraps the kubectl command.

    .DESCRIPTION
        This function provides a direct wrapper for kubectl commands, the CLI for Kubernetes.
        It passes all arguments directly to the kubectl CLI and supports all kubectl commands and options.
        This is the base function that other kubectl functions build upon.

    .PARAMETER Arguments
        All arguments to pass to the kubectl command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function executes kubectl commands but does not return objects.

    .EXAMPLE
        k version
        Shows the kubectl version using the alias.

        Invoke-Kubectl --help
        Displays kubectl help using the full function name.

        k get pods
        Lists all pods in the current namespace.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - All kubectl commands and options are supported.
        - This is the base function that other kubectl wrapper functions use.
    #>
    [Alias("k")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    if ($Arguments) {
        & kubectl $Arguments
    }
    else {
        & kubectl
    }
}

function Invoke-KubectlAllNamespaces {
    <#
    .SYNOPSIS
        A PowerShell function that wraps kubectl commands with --all-namespaces flag.

    .DESCRIPTION
        This function executes kubectl commands against all namespaces by automatically adding
        the --all-namespaces flag to the provided arguments.

    .PARAMETER Arguments
        All arguments to pass to the kubectl command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function executes kubectl commands but does not return objects.

    .EXAMPLE
        kca get pods
        Lists all pods across all namespaces.

        kca get services
        Lists all services across all namespaces.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Automatically adds --all-namespaces to the command.
        - Useful for cluster-wide resource viewing.
    #>
    [Alias("kca")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl $Arguments --all-namespaces
}

function Invoke-KubectlApplyFile {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl apply -f`.

    .DESCRIPTION
        This function applies Kubernetes manifests from files using kubectl apply -f command.
        It's a shortcut for applying configuration files to the cluster.

    .PARAMETER Arguments
        All arguments to pass to the kubectl apply -f command, typically file paths.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function applies configurations but does not return objects.

    .EXAMPLE
        kaf deployment.yaml
        Applies the deployment.yaml file to the cluster.

        kaf https://example.com/manifest.yaml
        Applies a manifest from a URL.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Files can be local paths or URLs.
        - Supports all kubectl apply options.
    #>
    [Alias("kaf")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl apply -f $Arguments
}

function Invoke-KubectlExecInteractive {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl exec -t -i`.

    .DESCRIPTION
        This function executes an interactive command in a running container using kubectl exec
        with both -t (pseudo-TTY) and -i (interactive) flags enabled.

    .PARAMETER Arguments
        All arguments to pass to the kubectl exec -t -i command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function provides interactive terminal access.

    .EXAMPLE
        keti my-pod -- /bin/bash
        Opens an interactive bash shell in the my-pod container.

        keti my-pod -c my-container -- sh
        Opens an interactive sh shell in the my-container of my-pod.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Pod must be running for exec to work.
        - Use -- to separate kubectl options from the command to execute.
    #>
    [Alias("keti")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl exec -t -i $Arguments
}

#---------------------------------------------------------------------------------------------------
# Configuration Management Functions
#---------------------------------------------------------------------------------------------------

function Invoke-KubectlConfigUseContext {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl config use-context`.

    .DESCRIPTION
        This function switches the current kubectl context to the specified context.
        Useful for switching between different clusters or environments.

    .PARAMETER Arguments
        The context name and any additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function switches contexts but does not return objects.

    .EXAMPLE
        kcuc dev-cluster
        Switches to the dev-cluster context.

        kcuc production
        Switches to the production context.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Context must exist in kubeconfig.
        - Changes the current context for all subsequent kubectl commands.
    #>
    [Alias("kcuc")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl config use-context $Arguments
}

function Invoke-KubectlConfigSetContext {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl config set-context`.

    .DESCRIPTION
        This function sets or modifies a kubectl context configuration.
        Used to create new contexts or modify existing ones.

    .PARAMETER Arguments
        Context name and configuration arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function modifies context configuration.

    .EXAMPLE
        kcsc my-context --cluster=my-cluster --user=my-user
        Sets up a new context with specified cluster and user.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Can create new contexts or modify existing ones.
    #>
    [Alias("kcsc")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl config set-context $Arguments
}

function Invoke-KubectlConfigDeleteContext {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl config delete-context`.

    .DESCRIPTION
        This function deletes a kubectl context from the configuration.

    .PARAMETER Arguments
        Context name to delete.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function deletes context configuration.

    .EXAMPLE
        kcdc old-cluster
        Deletes the old-cluster context.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Cannot delete the current active context.
    #>
    [Alias("kcdc")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl config delete-context $Arguments
}

function Invoke-KubectlConfigCurrentContext {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl config current-context`.

    .DESCRIPTION
        This function displays the current kubectl context.

    .PARAMETER Arguments
        Additional arguments (rarely used for this command).

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays the current context.

    .EXAMPLE
        kccc
        Shows the current kubectl context.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Shows which cluster/context is currently active.
    #>
    [Alias("kccc")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl config current-context $Arguments
}

function Invoke-KubectlConfigGetContexts {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl config get-contexts`.

    .DESCRIPTION
        This function lists all available kubectl contexts.

    .PARAMETER Arguments
        Additional arguments for the get-contexts command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays all available contexts.

    .EXAMPLE
        kcgc
        Lists all kubectl contexts.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Shows all configured contexts with their details.
    #>
    [Alias("kcgc")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl config get-contexts $Arguments
}

#---------------------------------------------------------------------------------------------------
# General Resource Management Functions
#---------------------------------------------------------------------------------------------------

function Invoke-KubectlDelete {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl delete`.

    .DESCRIPTION
        This function deletes Kubernetes resources using kubectl delete command.

    .PARAMETER Arguments
        Resource type, name, and any additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function deletes resources.

    .EXAMPLE
        kdel pod my-pod
        Deletes the pod named my-pod.

        kdel deployment my-deployment
        Deletes the deployment named my-deployment.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Be careful as this permanently deletes resources.
    #>
    [Alias("kdel")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl delete $Arguments
}

function Invoke-KubectlDeleteFile {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl delete -f`.

    .DESCRIPTION
        This function deletes Kubernetes resources defined in files using kubectl delete -f.

    .PARAMETER Arguments
        File paths and any additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function deletes resources from files.

    .EXAMPLE
        kdelf deployment.yaml
        Deletes resources defined in deployment.yaml.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Be careful as this permanently deletes resources.
    #>
    [Alias("kdelf")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl delete -f $Arguments
}

function Invoke-KubectlGetEvents {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get events --sort-by=".lastTimestamp"`.

    .DESCRIPTION
        This function gets Kubernetes events sorted by last timestamp.

    .PARAMETER Arguments
        Additional arguments for the get events command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays events.

    .EXAMPLE
        kge
        Shows events sorted by timestamp.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Events are sorted by most recent first.
    #>
    [Alias("kge")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get events --sort-by=".lastTimestamp" $Arguments
}

function Invoke-KubectlGetEventsWatch {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get events --sort-by=".lastTimestamp" --watch`.

    .DESCRIPTION
        This function watches Kubernetes events in real-time, sorted by timestamp.

    .PARAMETER Arguments
        Additional arguments for the get events command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays events in watch mode.

    .EXAMPLE
        kgew
        Watches events in real-time.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Use Ctrl+C to stop watching.
    #>
    [Alias("kgew")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get events --sort-by=".lastTimestamp" --watch $Arguments
}

#---------------------------------------------------------------------------------------------------
# Pod Management Functions
#---------------------------------------------------------------------------------------------------

function Invoke-KubectlGetPods {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods`.

    .DESCRIPTION
        This function lists pods in the current namespace.

    .PARAMETER Arguments
        Additional arguments for the get pods command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays pods.

    .EXAMPLE
        kgp
        Lists all pods in the current namespace.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kgp")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods $Arguments
}

function Invoke-KubectlGetPodsLabels {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods -l`.

    .DESCRIPTION
        This function lists pods filtered by labels.

    .PARAMETER Arguments
        Label selectors and additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays filtered pods.

    .EXAMPLE
        kgpl app=nginx
        Lists pods with label app=nginx.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kgpl")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods -l $Arguments
}

function Invoke-KubectlGetPodsNamespace {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods -n`.

    .DESCRIPTION
        This function lists pods in a specific namespace.

    .PARAMETER Arguments
        Namespace name and additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays pods from specified namespace.

    .EXAMPLE
        kgpn kube-system
        Lists pods in the kube-system namespace.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kgpn")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods -n $Arguments
}

function Invoke-KubectlGetPodsShowLabels {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods --show-labels`.

    .DESCRIPTION
        This function lists pods with their labels displayed.

    .PARAMETER Arguments
        Additional arguments for the command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays pods with labels.

    .EXAMPLE
        kgpsl
        Lists all pods showing their labels.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kgpsl")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods --show-labels $Arguments
}

function Invoke-KubectlGetPodsAllNamespaces {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods --all-namespaces`.

    .DESCRIPTION
        This function lists pods across all namespaces.

    .PARAMETER Arguments
        Additional arguments for the command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays pods from all namespaces.

    .EXAMPLE
        kgpa
        Lists pods from all namespaces.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kgpa")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods --all-namespaces $Arguments
}

function Invoke-KubectlGetPodsWatch {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods --watch`.

    .DESCRIPTION
        This function watches pods for changes in real-time.

    .PARAMETER Arguments
        Additional arguments for the command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays pods in watch mode.

    .EXAMPLE
        kgpw
        Watches pods for changes.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Use Ctrl+C to stop watching.
    #>
    [Alias("kgpw")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods --watch $Arguments
}

function Invoke-KubectlGetPodsWide {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods -o wide`.

    .DESCRIPTION
        This function lists pods with additional details (wide output).

    .PARAMETER Arguments
        Additional arguments for the command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays pods with wide output format.

    .EXAMPLE
        kgpwide
        Lists pods with additional details.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kgpwide")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods -o wide $Arguments
}

function Invoke-KubectlEditPods {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl edit pods`.

    .DESCRIPTION
        This function opens a pod configuration for editing.

    .PARAMETER Arguments
        Pod name and additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function opens an editor for pod configuration.

    .EXAMPLE
        kep my-pod
        Opens my-pod for editing.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kep")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl edit pods $Arguments
}

function Invoke-KubectlDescribePods {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl describe pods`.

    .DESCRIPTION
        This function shows detailed information about pods.

    .PARAMETER Arguments
        Pod name and additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays detailed pod information.

    .EXAMPLE
        kdp my-pod
        Shows detailed information about my-pod.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kdp")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl describe pods $Arguments
}

function Invoke-KubectlDeletePods {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl delete pods`.

    .DESCRIPTION
        This function deletes specified pods.

    .PARAMETER Arguments
        Pod name and additional arguments.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function deletes pods.

    .EXAMPLE
        kdelp my-pod
        Deletes my-pod.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
        - Be careful as this permanently deletes pods.
    #>
    [Alias("kdelp")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl delete pods $Arguments
}

function Invoke-KubectlGetPodsAll {
    <#
    .SYNOPSIS
        A PowerShell function that wraps `kubectl get pods --all-namespaces -o wide`.

    .DESCRIPTION
        This function lists all pods across all namespaces with wide output.

    .PARAMETER Arguments
        Additional arguments for the command.

    .INPUTS
        System.String[]. Arguments can be provided as parameters.

    .OUTPUTS
        None. This function displays all pods with detailed information.

    .EXAMPLE
        kgpall
        Lists all pods from all namespaces with wide output.

    .NOTES
        - Requires kubectl to be installed and accessible via PATH.
    #>
    [Alias("kgpall")]
    param(
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Arguments
    )

    if (-not (Test-KubectlInstalled)) {
        Write-Warning "kubectl is not installed or not in PATH. Please install kubectl to use this plugin."
        return
    }

    & kubectl get pods --all-namespaces -o wide $Arguments
}

#---------------------------------------------------------------------------------------------------
# Export Module Members
#---------------------------------------------------------------------------------------------------

# Export all functions
Export-ModuleMember -Function * -Alias *
